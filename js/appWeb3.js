"use strict";const Web3Modal=window.Web3Modal.default;const WalletConnectProvider=window.WalletConnectProvider.default;const Fortmatic=window.Fortmatic;const evmChains=window.evmChains;let web3Modal
let provider;let selectedAccount;function init(){console.log("Initializing example");console.log("WalletConnectProvider is",WalletConnectProvider);console.log("Fortmatic is",Fortmatic);console.log("window.web3 is",window.web3,"window.ethereum is",window.ethereum);if(location.protocol!=='https:'){document.querySelector("#btn-connect").setAttribute("disabled","disabled")
return;}
const providerOptions={walletconnect:{package:WalletConnectProvider,options:{infuraId:"8043bb2cf99347b1bfadfb233c5325c0",}},fortmatic:{package:Fortmatic,options:{key:"pk_test_391E26A3B43A3350"}}};web3Modal=new Web3Modal({cacheProvider:false,providerOptions,disableInjectedProvider:false,theme:{zIndex:99999,},});console.log("Web3Modal instance is",web3Modal);}
async function fetchAccountData(){const web3=new Web3(provider);console.log("Web3 instance is",web3);const chainId=await web3.eth.getChainId();const chainData=evmChains.getChain(chainId);const accounts=await web3.eth.getAccounts();console.log("Got accounts",accounts);selectedAccount=accounts[0];const rowResolvers=accounts.map(async(address)=>{const balance=await web3.eth.getBalance(address);const ethBalance=web3.utils.fromWei(balance,"ether");const humanFriendlyBalance=parseFloat(ethBalance).toFixed(4);});await Promise.all(rowResolvers);document.querySelector("#prepare").style.display="none";document.querySelector("#connected").style.display="inline";}
async function refreshAccountData(){document.querySelector("#connected").style.display="none";document.querySelector("#prepare").style.display="inline";document.querySelector("#btn-connect").setAttribute("disabled","disabled")
await fetchAccountData(provider);document.querySelector("#btn-connect").removeAttribute("disabled")}
async function onConnect(){console.log("Opening a dialog",web3Modal);try{provider=await web3Modal.connect();}catch(e){console.log("Could not get a wallet connection",e);return;}
provider.on("accountsChanged",(accounts)=>{fetchAccountData();});provider.on("chainChanged",(chainId)=>{fetchAccountData();});provider.on("networkChanged",(networkId)=>{fetchAccountData();});await refreshAccountData();}
async function onDisconnect(){console.log("Killing the wallet connection",provider);if(provider.close){await provider.close();await web3Modal.clearCachedProvider();provider=null;}
selectedAccount=null;document.querySelector("#prepare").style.display="inline";document.querySelector("#connected").style.display="none";}
window.addEventListener('load',async()=>{init();document.querySelector("#btn-connect").addEventListener("click",onConnect);document.querySelector("#btn-disconnect").addEventListener("click",onDisconnect);});